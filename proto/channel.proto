syntax = "proto3";

package UMetadata.GRPC;

/*
// The service that returns station information.
service Service
{
    /// Gets the currently running stations in the network.
    rpc GetAllActiveStations(AllActiveStationsRequest) returns(StationInformationResponse) {}; 
    /// Gets all stations in the network.
    rpc GetAllStations(AllStationsRequest) returns(StationInformationResponse) {}; 
}
*/

// Defines a channel.
message Channel
{
    // The network code - e.g., UU.
    string network = 1;
    // The station name - e..g, CWU.
    string station = 2;
    // The channel name - e.g., HHZ.
    string name = 3;
    // The location code - e.g., 01.  Note, if undefined then this will be "--".
    string location_code = 4;
    // The channel's latitude in degrees.  This will be in the range [90, 90].
    double latitude = 5;
    // The channel's longitude in degrees.  This will be in the range [-180, 180). 
    double longitude = 6;
    // The channel's elevation in meters above sea-level.  This will be in the
    // range [-10,000, 8600] meters.
    double elevation = 7;
    // The nominal sampling rate of the channel in Hz.
    double sampling_rate = 8;
    // The channel's azimuth in degrees measured positive east of north.  This
    // will be in the range [0, 360) where 0 is north and 90 is east.
    double azimuth = 9;
    // The channel's dip in degrees measured positive down from horizontal.
    // This will be in the range of [-90,90] where -90 is positive up.
    double dip = 10;
    // The UTC time in seconds since the epoch when the channel was opened.
    int64 start_time = 11;
    // The UTC time in seconds since the epoch when the channel was closed.
    int64 end_time = 12;
    // The UTC time was this channel's information was updated in microseconds since the epoch.
    int64 last_modified_mus = 13;
};

/*
// The station information corresponding to the request.
message StationInformationResponse
{
    // The stations in the network.
    repeated StationInformation = 1;
}
*/
